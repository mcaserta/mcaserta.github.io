name: Build and Deploy Site with Krik

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full clone needed for branch operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pandoc # for pdf generation
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install typst # also for pdf generation
        run: |
          # Use pre-built typst if available, otherwise compile from source
          if ! wget -q https://github.com/typst/typst/releases/latest/download/typst-x86_64-unknown-linux-musl.tar.xz; then
            echo "Pre-built typst not available, installing from cargo..."
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
            cargo install typst-cli
          else
            tar -xf typst-x86_64-unknown-linux-musl.tar.xz
            sudo mv typst-x86_64-unknown-linux-musl/typst /usr/local/bin/
            rm -rf typst-x86_64-unknown-linux-musl*
          fi

      - name: Setup Krik binary
        run: |
          # Use the download script with proper error handling
          chmod +x .github/scripts/download-krik.sh
          ./.github/scripts/download-krik.sh

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run Krik to generate site
        run: kk

      - name: Deploy to gh-pages
        run: |
          # Create temporary directory for generated site
          mkdir -p /tmp/generated-site
          
          # Copy generated files (adjust path as needed for Krik output)
          if [ -d "_site" ]; then
            cp -r _site/* /tmp/generated-site/
          else
            echo "Could not find generated site directory"
            ls -la
            exit 1
          fi
          
          # Fetch and check gh-pages branch
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "gh-pages branch exists, fetching and checking it out"
            git fetch origin gh-pages
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf .
          fi
          
          # Clear existing content (except .git)
          find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} \;
          
          # Copy new generated content
          cp -r /tmp/generated-site/* .
          
          # Add .nojekyll to prevent GitHub from processing as Jekyll site
          touch .nojekyll
          
          # Commit and push changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy site generated on $(date)"
            git push --force origin gh-pages
            echo "Site deployed successfully to gh-pages branch"
          fi